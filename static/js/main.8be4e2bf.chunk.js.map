{"version":3,"sources":["components/Tile.jsx","utils/utils.js","components/Counter.jsx","components/SmileyButton.jsx","components/Timer.jsx","components/Indicator.jsx","components/Minesweeper.jsx","components/DropdownMenu.jsx","App.js","index.js"],"names":["getClasses","hidden","classes","hasFlag","Tile","onClick","gameState","onContextMenu","className","disabled","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","Counter","count","SmileyButton","Timer","useState","seconds","setSeconds","useEffect","interval","setInterval","clearInterval","Indicator","flags","time","onReset","Minesweeper","props","state","tiles","hiddenTilesCount","handleClick","tile","setState","index_to_exclude","pos","x","difficulty","size","y","generateBoard","floodFill","openAdjacentFields","hasMine","gameOver","countFieldsBasedOnProp","mines","handleRightClick","e","preventDefault","handleReset","initialState","initBoard","counter","prevProps","prevState","this","map","row","index","push","exclude","positions","Array","keys","filter","item","indexes","slice","undefined","find","i","j","countSurroundingMines","numOfMines","x_offset","y_offset","isValid","prevCount","flag_count","hidden_count","getMinesCountFromClasses","t","parseInt","search","prop","trigger","revealMines","offset","Component","DropdownMenu","onMenuItemClick","levels","App","setDifficulty","Fragment","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8be4e2bf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Tile = ({\r\n  classes,\r\n  hidden,\r\n  onClick,\r\n  gameState,\r\n  onContextMenu,\r\n  hasFlag,\r\n}) => {\r\n  return (\r\n    <button\r\n      className={getClasses(hidden, classes, hasFlag)}\r\n      onClick={onClick}\r\n      disabled={gameState === \"win\" || gameState === \"dead\"}\r\n      onContextMenu={onContextMenu}\r\n    ></button>\r\n  );\r\n};\r\n\r\nconst getClasses = (hidden, classes, hasFlag) => {\r\n  if (hasFlag && hidden) return \"cell flag\";\r\n  if (!hidden) return classes;\r\n  return \"cell\";\r\n};\r\n\r\nexport default Tile;\r\n","function shuffle(array) {\r\n  var currentIndex = array.length,\r\n    temporaryValue,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n  return array;\r\n}\r\n\r\nexport default shuffle;\r\n","import React from \"react\";\r\n\r\nconst Counter = ({ count, classes }) => {\r\n  return (\r\n    <div className={classes}>\r\n      <span className={`count n${Math.floor(count / 100)}`} />\r\n      <span className={`count n${Math.floor(count / 10)}`} />\r\n      <span className={`count n${count % 10}`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\n\r\nfunction SmileyButton({ onClick, gameState }) {\r\n  return <button className={`smiley ${gameState}`} onClick={onClick} />;\r\n}\r\n\r\nexport default SmileyButton;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Counter from \"./Counter\";\r\n\r\nconst Timer = ({ gameState }) => {\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (gameState === \"\") setSeconds(0);\r\n    if (gameState === \"dead\" || gameState === \"win\") return;\r\n    const interval = setInterval(() => {\r\n      if (gameState === \"started\") setSeconds((seconds) => seconds + 1);\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, [gameState]);\r\n\r\n  return <Counter count={seconds} classes={\"time\"} />;\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport Counter from \"./Counter\";\r\nimport SmileyButton from \"./SmileyButton\";\r\nimport Timer from \"./Timer\";\r\n\r\nfunction Indicator({ flags, time, onReset, gameState }) {\r\n  return (\r\n    <div className=\"indicator\">\r\n      <Counter count={flags} classes=\"flags-counter\" />\r\n      <SmileyButton onClick={onReset} gameState={gameState} />\r\n      <Timer count={time} classes=\"time\" gameState={gameState} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Indicator;\r\n","import React, { Component } from \"react\";\r\nimport Tile from \"./Tile\";\r\nimport shuffle from \"../utils/utils\";\r\nimport Indicator from \"./Indicator\";\r\n\r\nclass Minesweeper extends Component {\r\n  state = {\r\n    tiles: [],\r\n    hiddenTilesCount: 0,\r\n    time: 0,\r\n    flags: 0,\r\n    gameState: \"\",\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state.tiles = this.initBoard();\r\n    this.state.hiddenTilesCount = this.props.difficulty.counter;\r\n    this.state.flags = this.props.difficulty.mines;\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps !== this.props) this.handleReset();\r\n  }\r\n\r\n  // if hasMine and first click\r\n  //   iterate over the generated array and find the first one\r\n\r\n  handleClick = (tile) => {\r\n    if (!tile.hidden) {\r\n      this.openAdjacentFields(tile);\r\n    } else if (tile.hasFlag) return;\r\n    else if (this.state.gameState === \"\") {\r\n      this.setState({ gameState: \"started\" });\r\n      const index_to_exclude =\r\n        tile.pos.x * this.props.difficulty.size.x + tile.pos.y;\r\n\r\n      const tiles = this.generateBoard(index_to_exclude);\r\n      return this.setState({ tiles }, () => {\r\n        this.floodFill(tile.pos.x, tile.pos.y, 0);\r\n      });\r\n    }\r\n    if (tile.hasMine) return this.gameOver(tile.pos);\r\n    this.floodFill(tile.pos.x, tile.pos.y, 0);\r\n    if (this.countFieldsBasedOnProp(\"hidden\") === this.props.difficulty.mines) {\r\n      this.setState({ gameState: \"win\" });\r\n    }\r\n  };\r\n\r\n  handleRightClick = (e, tile) => {\r\n    e.preventDefault();\r\n    const flags = this.state.flags;\r\n\r\n    if (!tile.hidden || (flags === 0 && !tile.hasFlag)) return;\r\n\r\n    const tiles = [...this.state.tiles];\r\n\r\n    if (tile.hasFlag) {\r\n      tiles[tile.pos.x][tile.pos.y].hasFlag = false;\r\n      this.setState({ flags: flags + 1 });\r\n    } else {\r\n      tiles[tile.pos.x][tile.pos.y].hasFlag = true;\r\n      this.setState({ flags: flags - 1 });\r\n    }\r\n\r\n    this.setState({ tiles });\r\n  };\r\n\r\n  handleReset = () => {\r\n    const tiles = this.initBoard();\r\n    const initialState = {\r\n      tiles,\r\n      hiddenTilesCount: this.props.difficulty.count,\r\n      time: 0,\r\n      flags: this.props.difficulty.mines,\r\n      gameState: \"\",\r\n    };\r\n    this.setState(initialState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"minesweeper\">\r\n        <Indicator\r\n          flags={this.state.flags}\r\n          time={this.state.time}\r\n          onReset={this.handleReset}\r\n          gameState={this.state.gameState}\r\n        />\r\n        <div className=\"board\">\r\n          {this.state.tiles.map((row, index) => (\r\n            <div className=\"row\" key={index}>\r\n              {row.map((tile) => (\r\n                <Tile\r\n                  key={tile.pos.x * 10 + tile.pos.y}\r\n                  classes={tile.classes}\r\n                  hidden={tile.hidden}\r\n                  onClick={() => this.handleClick(tile)}\r\n                  gameState={this.state.gameState}\r\n                  onContextMenu={(e) => this.handleRightClick(e, tile)}\r\n                  hasFlag={tile.hasFlag}\r\n                />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  initBoard() {\r\n    const tiles = [];\r\n    const size = this.props.difficulty.size;\r\n\r\n    for (let x = 0; x < size.x; x++) {\r\n      let row = [];\r\n      for (let y = 0; y < size.y; y++) {\r\n        row.push({\r\n          pos: { x, y },\r\n          hasMine: false,\r\n          hasFlag: false,\r\n          classes: \"cell\",\r\n          hidden: true,\r\n        });\r\n      }\r\n      tiles.push(row);\r\n    }\r\n\r\n    return tiles;\r\n  }\r\n\r\n  generateBoard(exclude) {\r\n    const tiles = [];\r\n    const size = this.props.difficulty.size;\r\n    const array = [...Array(this.props.difficulty.count).keys()];\r\n    const positions = array.filter((item) => item !== exclude);\r\n\r\n    const indexes = shuffle(positions).slice(0, this.props.difficulty.mines);\r\n\r\n    for (let x = 0; x < size.x; x++) {\r\n      let row = [];\r\n      for (let y = 0; y < size.y; y++) {\r\n        row.push({\r\n          pos: { x, y },\r\n          hasMine:\r\n            indexes.find((index) => index === x * size.x + y) !== undefined,\r\n          hasFlag: false,\r\n          classes: \"cell\",\r\n          hidden: true,\r\n        });\r\n      }\r\n      tiles.push(row);\r\n    }\r\n\r\n    for (let i = 0; i < size.x; i++) {\r\n      for (let j = 0; j < size.y; j++) {\r\n        if (tiles[i][j].hasMine) tiles[i][j].classes += \" mine\";\r\n        else\r\n          tiles[i][j].classes += ` n${this.countSurroundingMines(\r\n            tiles[i][j],\r\n            tiles\r\n          )}`;\r\n      }\r\n    }\r\n\r\n    return tiles;\r\n  }\r\n\r\n  countSurroundingMines(tile, tiles) {\r\n    const size = this.props.difficulty.size;\r\n\r\n    let numOfMines = 0;\r\n    for (let x_offset = -1; x_offset <= 1; x_offset++) {\r\n      for (let y_offset = -1; y_offset <= 1; y_offset++) {\r\n        if (this.isValid(tile.pos, { x: x_offset, y: y_offset }, size)) {\r\n          if (tiles[tile.pos.x + x_offset][tile.pos.y + y_offset].hasMine)\r\n            numOfMines++;\r\n        }\r\n      }\r\n    }\r\n    return numOfMines;\r\n  }\r\n\r\n  floodFill(x, y, prevCount) {\r\n    const tiles = [...this.state.tiles];\r\n    const size = this.props.difficulty.size;\r\n    if (\r\n      x >= 0 &&\r\n      x < size.x &&\r\n      y >= 0 &&\r\n      y < size.y &&\r\n      tiles[x][y].hidden &&\r\n      prevCount === 0\r\n    ) {\r\n      if (!tiles[x][y].hasMine && !tiles[x][y].hasFlag) {\r\n        tiles[x][y].hidden = false;\r\n        let count = this.countSurroundingMines(tiles[x][y], tiles);\r\n        this.floodFill(x - 1, y, count);\r\n        this.floodFill(x + 1, y, count);\r\n        this.floodFill(x, y - 1, count);\r\n        this.floodFill(x, y + 1, count);\r\n      }\r\n    }\r\n    this.setState({ tiles });\r\n  }\r\n\r\n  openAdjacentFields(tile) {\r\n    const tiles = [...this.state.tiles];\r\n    const size = this.props.difficulty.size;\r\n    let flag_count = 0;\r\n    let hidden_count = 0;\r\n\r\n    for (let x_offset = -1; x_offset <= 1; x_offset++) {\r\n      for (let y_offset = -1; y_offset <= 1; y_offset++) {\r\n        if (this.isValid(tile.pos, { x: x_offset, y: y_offset }, size)) {\r\n          if (tiles[tile.pos.x + x_offset][tile.pos.y + y_offset].hasFlag)\r\n            flag_count++;\r\n          if (tiles[tile.pos.x + x_offset][tile.pos.y + y_offset].hidden)\r\n            hidden_count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (\r\n      flag_count === this.getMinesCountFromClasses(tile) &&\r\n      hidden_count > 0 &&\r\n      hidden_count !== flag_count\r\n    ) {\r\n      for (let x_offset = -1; x_offset <= 1; x_offset++) {\r\n        for (let y_offset = -1; y_offset <= 1; y_offset++) {\r\n          if (this.isValid(tile.pos, { x: x_offset, y: y_offset }, size)) {\r\n            if (!tiles[tile.pos.x + x_offset][tile.pos.y + y_offset].hasFlag) {\r\n              let t = tiles[tile.pos.x + x_offset][tile.pos.y + y_offset];\r\n              this.floodFill(t.pos.x, t.pos.y, 0);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.setState({ tiles });\r\n    }\r\n  }\r\n\r\n  getMinesCountFromClasses(tile) {\r\n    return parseInt(tile.classes[tile.classes.search(\"n\") + 1]);\r\n  }\r\n\r\n  countFieldsBasedOnProp(prop) {\r\n    const size = this.props.difficulty.size;\r\n    let count = 0;\r\n    for (let x = 0; x < size.x; x++)\r\n      for (let y = 0; y < size.y; y++)\r\n        if (this.state.tiles[x][y][prop]) count++;\r\n\r\n    return count;\r\n  }\r\n\r\n  gameOver(trigger) {\r\n    this.revealMines(trigger);\r\n    this.setState({ gameState: \"dead\" });\r\n  }\r\n\r\n  revealMines(trigger) {\r\n    const tiles = [...this.state.tiles];\r\n    const size = this.props.difficulty.size;\r\n    for (let x = 0; x < size.x; x++) {\r\n      for (let y = 0; y < size.y; y++) {\r\n        if (!tiles[x][y].hasFlag && tiles[x][y].hasMine)\r\n          tiles[x][y].hidden = false;\r\n        if (tiles[x][y].hasFlag && !tiles[x][y].hasMine) {\r\n          tiles[x][y].hidden = false;\r\n          tiles[x][y].classes += \" dead-flag\";\r\n        }\r\n        if (trigger && x === trigger.x && y === trigger.y)\r\n          tiles[x][y].classes += \" triggeredDeath\";\r\n      }\r\n    }\r\n    this.setState({ tiles });\r\n  }\r\n\r\n  isValid(pos, offset, size) {\r\n    return (\r\n      pos.x + offset.x >= 0 &&\r\n      pos.y + offset.y >= 0 &&\r\n      pos.x + offset.x < size.x &&\r\n      pos.y + offset.y < size.y\r\n    );\r\n  }\r\n}\r\n\r\nexport default Minesweeper;\r\n","import React from \"react\";\r\nimport \"../Minesweeper.css\";\r\n\r\nfunction DropdownMenu({ onMenuItemClick }) {\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <button className=\"dropdown-btn\">Difficulty</button>\r\n      <div className=\"dropdown-content\">\r\n        <button onClick={() => onMenuItemClick(\"beginner\")}>Beginner</button>\r\n        <button onClick={() => onMenuItemClick(\"intermediate\")}>\r\n          Intermediate\r\n        </button>\r\n        <button onClick={() => onMenuItemClick(\"advanced\")}>Advanced</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropdownMenu;\r\n","import React, { useState } from \"react\";\nimport Minesweeper from \"./components/Minesweeper\";\nimport DropdownMenu from \"./components/DropdownMenu\";\nimport \"./Minesweeper.css\";\n\nconst levels = {\n  beginner: {\n    mines: 10,\n    size: { x: 9, y: 9 },\n    count: 81,\n  },\n  intermediate: {\n    mines: 40,\n    size: { x: 16, y: 16 },\n    count: 256,\n  },\n  advanced: {\n    mines: 99,\n    size: { x: 16, y: 32 },\n    count: 512,\n  },\n};\n\nfunction App() {\n  const [difficulty, setDifficulty] = useState(levels.beginner);\n\n  const handleMenuItemClick = (id) => {\n    if (id === \"beginner\") {\n      setDifficulty(levels.beginner);\n    } else if (id === \"intermediate\") {\n      setDifficulty(levels.intermediate);\n    } else if (id === \"advanced\") {\n      setDifficulty(levels.advanced);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <DropdownMenu onMenuItemClick={handleMenuItemClick} />\n      <Minesweeper key={difficulty} difficulty={difficulty} />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}